sil_stage canonical

import Builtin
import Swift
import SwiftShims

enum Identifier : Hashable {
  case string(String)
  case integer(Int)
  func hash(into hasher: inout Hasher)
  @_implements(Equatable, ==(_:_:)) static func __derived_enum_equals(_ a: Identifier, _ b: Identifier) -> Bool
  var hashValue: Int { get }
}

@_hasStorage @_hasInitialValue let value: AnyHashable { get }

// value
sil_global hidden [let] @$s6source5values11AnyHashableVvp : $AnyHashable

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s6source5values11AnyHashableVvp  // id: %2
  %3 = global_addr @$s6source5values11AnyHashableVvp : $*AnyHashable // user: %13
  %4 = alloc_stack $String                        // users: %11, %15, %14, %13
  %5 = string_literal utf8 "abc"                  // user: %10
  %6 = integer_literal $Builtin.Word, 3           // user: %10
  %7 = integer_literal $Builtin.Int1, -1          // user: %10
  %8 = metatype $@thin String.Type                // user: %10
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %9 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %10
  %10 = apply %9(%5, %6, %7, %8) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %11
  store %10 to %4 : $*String                      // id: %11
  // function_ref _convertToAnyHashable<A>(_:)
  %12 = function_ref @$ss21_convertToAnyHashableys0cD0VxSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> @out AnyHashable // user: %13
  %13 = apply %12<String>(%3, %4) : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> @out AnyHashable
  destroy_addr %4 : $*String                      // id: %14
  dealloc_stack %4 : $*String                     // id: %15
  %16 = integer_literal $Builtin.Int32, 0         // user: %17
  %17 = struct $Int32 (%16 : $Builtin.Int32)      // user: %18
  return %17 : $Int32                             // id: %18
} // end sil function 'main'

// Identifier.hash(into:)
sil hidden @$s6source10IdentifierO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed Identifier) -> () {
// %0 "hasher"                                    // users: %39, %32, %19, %12, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $*Hasher, %1 : $Identifier):
  debug_value %0 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref // id: %2
  debug_value %1 : $Identifier, let, name "self", argno 2, implicit // id: %3
  switch_enum %1 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb2 // id: %4

// %5                                             // users: %24, %18, %7, %6
bb1(%5 : $String):                                // Preds: bb0
  retain_value %5 : $String                       // id: %6
  debug_value %5 : $String, let, name "a0"        // id: %7
  %8 = integer_literal $Builtin.Int64, 0          // user: %9
  %9 = struct $Int (%8 : $Builtin.Int64)          // user: %11
  %10 = alloc_stack $Int                          // users: %11, %16, %14
  store %9 to %10 : $*Int                         // id: %11
  %12 = begin_access [modify] [static] %0 : $*Hasher // users: %15, %14
  // function_ref Hasher.combine<A>(_:)
  %13 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> () // user: %14
  %14 = apply %13<Int>(%10, %12) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()
  end_access %12 : $*Hasher                       // id: %15
  dealloc_stack %10 : $*Int                       // id: %16
  %17 = alloc_stack $String                       // users: %18, %23, %21
  store %5 to %17 : $*String                      // id: %18
  %19 = begin_access [modify] [static] %0 : $*Hasher // users: %22, %21
  // function_ref Hasher.combine<A>(_:)
  %20 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> () // user: %21
  %21 = apply %20<String>(%17, %19) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()
  end_access %19 : $*Hasher                       // id: %22
  dealloc_stack %17 : $*String                    // id: %23
  release_value %5 : $String                      // id: %24
  br bb3                                          // id: %25

// %26                                            // users: %38, %27
bb2(%26 : $Int):                                  // Preds: bb0
  debug_value %26 : $Int, let, name "a0"          // id: %27
  %28 = integer_literal $Builtin.Int64, 1         // user: %29
  %29 = struct $Int (%28 : $Builtin.Int64)        // user: %31
  %30 = alloc_stack $Int                          // users: %31, %36, %34
  store %29 to %30 : $*Int                        // id: %31
  %32 = begin_access [modify] [static] %0 : $*Hasher // users: %35, %34
  // function_ref Hasher.combine<A>(_:)
  %33 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> () // user: %34
  %34 = apply %33<Int>(%30, %32) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()
  end_access %32 : $*Hasher                       // id: %35
  dealloc_stack %30 : $*Int                       // id: %36
  %37 = alloc_stack $Int                          // users: %38, %43, %41
  store %26 to %37 : $*Int                        // id: %38
  %39 = begin_access [modify] [static] %0 : $*Hasher // users: %42, %41
  // function_ref Hasher.combine<A>(_:)
  %40 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> () // user: %41
  %41 = apply %40<Int>(%37, %39) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()
  end_access %39 : $*Hasher                       // id: %42
  dealloc_stack %37 : $*Int                       // id: %43
  br bb3                                          // id: %44

bb3:                                              // Preds: bb2 bb1
  %45 = tuple ()                                  // user: %46
  return %45 : $()                                // id: %46
} // end sil function '$s6source10IdentifierO4hash4intoys6HasherVz_tF'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

// Hasher.combine<A>(_:)
sil [always_inline] @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()

// static Identifier.__derived_enum_equals(_:_:)
sil hidden @$s6source10IdentifierO21__derived_enum_equalsySbAC_ACtFZ : $@convention(method) (@guaranteed Identifier, @guaranteed Identifier, @thin Identifier.Type) -> Bool {
// %0 "a"                                         // users: %9, %8, %6, %3
// %1 "b"                                         // users: %35, %11, %8, %7, %4
// %2 "self"                                      // user: %5
bb0(%0 : $Identifier, %1 : $Identifier, %2 : $@thin Identifier.Type):
  debug_value %0 : $Identifier, let, name "a", argno 1, implicit // id: %3
  debug_value %1 : $Identifier, let, name "b", argno 2, implicit // id: %4
  debug_value %2 : $@thin Identifier.Type, let, name "self", argno 3, implicit // id: %5
  retain_value %0 : $Identifier                   // id: %6
  retain_value %1 : $Identifier                   // id: %7
  %8 = tuple (%0 : $Identifier, %1 : $Identifier) // users: %53, %48, %44, %31, %25
  switch_enum %0 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb6 // id: %9

// %10                                            // users: %30, %24, %18, %15, %13
bb1(%10 : $String):                               // Preds: bb0
  switch_enum %1 : $Identifier, case #Identifier.string!enumelt: bb2, default bb5 // #Identifier.integer!enumelt; id: %11

// %12                                            // users: %29, %23, %18, %14
bb2(%12 : $String):                               // Preds: bb1
  retain_value %10 : $String                      // id: %13
  retain_value %12 : $String                      // id: %14
  debug_value %10 : $String, let, name "l0"       // id: %15
  %16 = metatype $@thin String.Type               // user: %18
  // function_ref static String.== infix(_:_:)
  %17 = function_ref @$sSS2eeoiySbSS_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool // user: %18
  %18 = apply %17(%10, %12, %16) : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool // user: %19
  %19 = struct_extract %18 : $Bool, #Bool._value  // user: %20
  cond_br %19, bb3, bb4                           // id: %20

bb3:                                              // Preds: bb2
  %21 = integer_literal $Builtin.Int1, -1         // user: %22
  %22 = struct $Bool (%21 : $Builtin.Int1)        // user: %26
  release_value %12 : $String                     // id: %23
  release_value %10 : $String                     // id: %24
  release_value %8 : $(Identifier, Identifier)    // id: %25
  br bb12(%22 : $Bool)                            // id: %26

bb4:                                              // Preds: bb2
  %27 = integer_literal $Builtin.Int1, 0          // user: %28
  %28 = struct $Bool (%27 : $Builtin.Int1)        // user: %32
  release_value %12 : $String                     // id: %29
  release_value %10 : $String                     // id: %30
  release_value %8 : $(Identifier, Identifier)    // id: %31
  br bb12(%28 : $Bool)                            // id: %32

bb5:                                              // Preds: bb1
  br bb11                                         // id: %33

// %34                                            // users: %38, %37
bb6(%34 : $Int):                                  // Preds: bb0
  switch_enum %1 : $Identifier, case #Identifier.integer!enumelt: bb7, default bb10 // #Identifier.string!enumelt; id: %35

// %36                                            // user: %39
bb7(%36 : $Int):                                  // Preds: bb6
  debug_value %34 : $Int, let, name "l0"          // id: %37
  %38 = struct_extract %34 : $Int, #Int._value    // user: %40
  %39 = struct_extract %36 : $Int, #Int._value    // user: %40
  %40 = builtin "cmp_eq_Int64"(%38 : $Builtin.Int64, %39 : $Builtin.Int64) : $Builtin.Int1 // user: %41
  cond_br %40, bb8, bb9                           // id: %41

bb8:                                              // Preds: bb7
  %42 = integer_literal $Builtin.Int1, -1         // user: %43
  %43 = struct $Bool (%42 : $Builtin.Int1)        // user: %45
  release_value %8 : $(Identifier, Identifier)    // id: %44
  br bb12(%43 : $Bool)                            // id: %45

bb9:                                              // Preds: bb7
  %46 = integer_literal $Builtin.Int1, 0          // user: %47
  %47 = struct $Bool (%46 : $Builtin.Int1)        // user: %49
  release_value %8 : $(Identifier, Identifier)    // id: %48
  br bb12(%47 : $Bool)                            // id: %49

bb10:                                             // Preds: bb6
  br bb11                                         // id: %50

bb11:                                             // Preds: bb10 bb5
  %51 = integer_literal $Builtin.Int1, 0          // user: %52
  %52 = struct $Bool (%51 : $Builtin.Int1)        // user: %54
  release_value %8 : $(Identifier, Identifier)    // id: %53
  br bb12(%52 : $Bool)                            // id: %54

// %55                                            // user: %56
bb12(%55 : $Bool):                                // Preds: bb11 bb8 bb9 bb3 bb4
  return %55 : $Bool                              // id: %56
} // end sil function '$s6source10IdentifierO21__derived_enum_equalsySbAC_ACtFZ'

// Bool.init(_builtinBooleanLiteral:)
sil public_external [transparent] @$sSb22_builtinBooleanLiteralSbBi1__tcfC : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool {
// %0                                             // user: %2
bb0(%0 : $Builtin.Int1, %1 : $@thin Bool.Type):
  %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$sSb22_builtinBooleanLiteralSbBi1__tcfC'

// static String.== infix(_:_:)
sil [always_inline] [readonly] [_semantics "string.equals"] @$sSS2eeoiySbSS_SStFZ : $@convention(method) (@guaranteed String, @guaranteed String, @thin String.Type) -> Bool

// static Int.== infix(_:_:)
sil public_external [transparent] @$sSi2eeoiySbSi_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value      // user: %5
  %4 = struct_extract %1 : $Int, #Int._value      // user: %5
  %5 = builtin "cmp_eq_Int64"(%3 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %6
  %6 = struct $Bool (%5 : $Builtin.Int1)          // user: %7
  return %6 : $Bool                               // id: %7
} // end sil function '$sSi2eeoiySbSi_SitFZ'

// Identifier.hashValue.getter
sil hidden @$s6source10IdentifierO9hashValueSivg : $@convention(method) (@guaranteed Identifier) -> Int {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $Identifier):
  debug_value %0 : $Identifier, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_stack $Identifier                    // users: %3, %6, %5
  store %0 to %2 : $*Identifier                   // id: %3
  // function_ref _hashValue<A>(for:)
  %4 = function_ref @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int // user: %5
  %5 = apply %4<Identifier>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int // user: %7
  dealloc_stack %2 : $*Identifier                 // id: %6
  return %5 : $Int                                // id: %7
} // end sil function '$s6source10IdentifierO9hashValueSivg'

// _hashValue<A>(for:)
sil [always_inline] @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int

// protocol witness for Hashable.hashValue.getter in conformance Identifier
sil private [transparent] [thunk] @$s6source10IdentifierOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed Identifier) -> Int {
// %0                                             // user: %1
bb0(%0 : $*Identifier):
  %1 = load %0 : $*Identifier                     // user: %3
  // function_ref Identifier.hashValue.getter
  %2 = function_ref @$s6source10IdentifierO9hashValueSivg : $@convention(method) (@guaranteed Identifier) -> Int // user: %3
  %3 = apply %2(%1) : $@convention(method) (@guaranteed Identifier) -> Int // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s6source10IdentifierOSHAASH9hashValueSivgTW'

// protocol witness for Hashable.hash(into:) in conformance Identifier
sil private [transparent] [thunk] @$s6source10IdentifierOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed Identifier) -> () {
// %0                                             // user: %4
// %1                                             // user: %2
bb0(%0 : $*Hasher, %1 : $*Identifier):
  %2 = load %1 : $*Identifier                     // user: %4
  // function_ref Identifier.hash(into:)
  %3 = function_ref @$s6source10IdentifierO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed Identifier) -> () // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@inout Hasher, @guaranteed Identifier) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s6source10IdentifierOSHAASH4hash4intoys6HasherVz_tFTW'

// protocol witness for Hashable._rawHashValue(seed:) in conformance Identifier
sil private [transparent] [thunk] [always_inline] @$s6source10IdentifierOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed Identifier) -> Int {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $*Identifier):
  // function_ref Hashable._rawHashValue(seed:)
  %2 = function_ref @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int // user: %3
  %3 = apply %2<Identifier>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s6source10IdentifierOSHAASH13_rawHashValue4seedS2i_tFTW'

// Hashable._rawHashValue(seed:)
sil [always_inline] @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int

// protocol witness for static Equatable.== infix(_:_:) in conformance Identifier
sil private [transparent] [thunk] @$s6source10IdentifierOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed Identifier, @in_guaranteed Identifier, @thick Identifier.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*Identifier, %1 : $*Identifier, %2 : $@thick Identifier.Type):
  %3 = load %0 : $*Identifier                     // user: %7
  %4 = load %1 : $*Identifier                     // user: %7
  %5 = metatype $@thin Identifier.Type            // user: %7
  // function_ref static Identifier.__derived_enum_equals(_:_:)
  %6 = function_ref @$s6source10IdentifierO21__derived_enum_equalsySbAC_ACtFZ : $@convention(method) (@guaranteed Identifier, @guaranteed Identifier, @thin Identifier.Type) -> Bool // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (@guaranteed Identifier, @guaranteed Identifier, @thin Identifier.Type) -> Bool // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s6source10IdentifierOSQAASQ2eeoiySbx_xtFZTW'

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [always_inline] [readonly] [_semantics "string.makeUTF8"] @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// _convertToAnyHashable<A>(_:)
sil @$ss21_convertToAnyHashableys0cD0VxSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> @out AnyHashable

sil_witness_table hidden Identifier: Hashable module source {
  base_protocol Equatable: Identifier: Equatable module source
  method #Hashable.hashValue!getter: <Self where Self : Hashable> (Self) -> () -> Int : @$s6source10IdentifierOSHAASH9hashValueSivgTW	// protocol witness for Hashable.hashValue.getter in conformance Identifier
  method #Hashable.hash: <Self where Self : Hashable> (Self) -> (inout Hasher) -> () : @$s6source10IdentifierOSHAASH4hash4intoys6HasherVz_tFTW	// protocol witness for Hashable.hash(into:) in conformance Identifier
  method #Hashable._rawHashValue: <Self where Self : Hashable> (Self) -> (Int) -> Int : @$s6source10IdentifierOSHAASH13_rawHashValue4seedS2i_tFTW	// protocol witness for Hashable._rawHashValue(seed:) in conformance Identifier
}

sil_witness_table hidden Identifier: Equatable module source {
  method #Equatable."==": <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s6source10IdentifierOSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance Identifier
}



// Mappings from '#fileID' to '#filePath':
//   'source/source.swift' => 'source.swift'


