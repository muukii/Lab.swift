sil_stage canonical

import Builtin
import Swift
import SwiftShims

enum Identifier : Hashable {
  case string(String)
  case integer(Int)
  func hash(into hasher: inout Hasher)
  @_implements(Equatable, ==(_:_:)) static func __derived_enum_equals(_ a: Identifier, _ b: Identifier) -> Bool
  var hashValue: Int { get }
}

@_hasStorage @_hasInitialValue let value: AnyHashable { get }

// value
sil_global hidden [let] @$s6source5values11AnyHashableVvp : $AnyHashable

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s6source5values11AnyHashableVvp  // id: %2
  %3 = global_addr @$s6source5values11AnyHashableVvp : $*AnyHashable // user: %15
  %4 = integer_literal $Builtin.Int64, 6513249    // user: %5
  %5 = struct $UInt64 (%4 : $Builtin.Int64)       // user: %8
  %6 = integer_literal $Builtin.Int64, -2089670227099910144 // user: %7
  %7 = value_to_bridge_object %6 : $Builtin.Int64 // user: %8
  %8 = struct $_StringObject (%5 : $UInt64, %7 : $Builtin.BridgeObject) // user: %9
  %9 = struct $_StringGuts (%8 : $_StringObject)  // user: %10
  %10 = struct $String (%9 : $_StringGuts)        // user: %13
  %11 = metatype $@thin AnyHashable.Type          // user: %15
  %12 = alloc_stack $String                       // users: %16, %15, %13
  store %10 to %12 : $*String                     // id: %13
  // function_ref AnyHashable.init<A>(_:)
  %14 = function_ref @$ss11AnyHashableVyABxcSHRzlufC : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in τ_0_0, @thin AnyHashable.Type) -> @out AnyHashable // user: %15
  %15 = apply %14<String>(%3, %12, %11) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in τ_0_0, @thin AnyHashable.Type) -> @out AnyHashable
  dealloc_stack %12 : $*String                    // id: %16
  %17 = integer_literal $Builtin.Int32, 0         // user: %18
  %18 = struct $Int32 (%17 : $Builtin.Int32)      // user: %19
  return %18 : $Int32                             // id: %19
} // end sil function 'main'

// Identifier.hash(into:)
sil hidden @$s6source10IdentifierO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed Identifier) -> () {
// %0 "hasher"                                    // users: %10, %12, %19, %22, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $*Hasher, %1 : $Identifier):
  debug_value %0 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref // id: %2
  debug_value %1 : $Identifier, let, name "self", argno 2, implicit // id: %3
  switch_enum %1 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb2 // id: %4

// %5                                             // users: %12, %6
bb1(%5 : $String):                                // Preds: bb0
  debug_value %5 : $String, let, name "a0"        // id: %6
  %7 = integer_literal $Builtin.Int64, 0          // user: %8
  %8 = struct $UInt (%7 : $Builtin.Int64)         // user: %10
  // function_ref Hasher._combine(_:)
  %9 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // user: %10
  %10 = apply %9(%8, %0) : $@convention(method) (UInt, @inout Hasher) -> ()
  // function_ref String.hash(into:)
  %11 = function_ref @$sSS4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed String) -> () // user: %12
  %12 = apply %11(%0, %5) : $@convention(method) (@inout Hasher, @guaranteed String) -> ()
  br bb3                                          // id: %13

// %14                                            // users: %20, %15
bb2(%14 : $Int):                                  // Preds: bb0
  debug_value %14 : $Int, let, name "a0"          // id: %15
  %16 = integer_literal $Builtin.Int64, 1         // user: %17
  %17 = struct $UInt (%16 : $Builtin.Int64)       // user: %19
  // function_ref Hasher._combine(_:)
  %18 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // users: %22, %19
  %19 = apply %18(%17, %0) : $@convention(method) (UInt, @inout Hasher) -> ()
  %20 = struct_extract %14 : $Int, #Int._value    // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %22
  %22 = apply %18(%21, %0) : $@convention(method) (UInt, @inout Hasher) -> ()
  br bb3                                          // id: %23

bb3:                                              // Preds: bb2 bb1
  %24 = tuple ()                                  // user: %25
  return %24 : $()                                // id: %25
} // end sil function '$s6source10IdentifierO4hash4intoys6HasherVz_tF'

// static Identifier.__derived_enum_equals(_:_:)
sil hidden @$s6source10IdentifierO21__derived_enum_equalsySbAC_ACtFZ : $@convention(method) (@guaranteed Identifier, @guaranteed Identifier, @thin Identifier.Type) -> Bool {
// %0 "a"                                         // users: %6, %3
// %1 "b"                                         // users: %44, %8, %4
// %2 "self"                                      // user: %5
bb0(%0 : $Identifier, %1 : $Identifier, %2 : $@thin Identifier.Type):
  debug_value %0 : $Identifier, let, name "a", argno 1, implicit // id: %3
  debug_value %1 : $Identifier, let, name "b", argno 2, implicit // id: %4
  debug_value %2 : $@thin Identifier.Type, let, name "self", argno 3, implicit // id: %5
  switch_enum %0 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb12 // id: %6

// %7                                             // users: %11, %10
bb1(%7 : $String):                                // Preds: bb0
  switch_enum %1 : $Identifier, case #Identifier.string!enumelt: bb2, case #Identifier.integer!enumelt: bb11, forwarding: @owned // id: %8

// %9                                             // user: %12
bb2(%9 : $String):                                // Preds: bb1
  debug_value %7 : $String, let, name "l0"        // id: %10
  %11 = struct_extract %7 : $String, #String._guts // users: %35, %13
  %12 = struct_extract %9 : $String, #String._guts // users: %35, %15
  %13 = struct_extract %11 : $_StringGuts, #_StringGuts._object // users: %21, %14
  %14 = struct_extract %13 : $_StringObject, #_StringObject._countAndFlagsBits // user: %17
  %15 = struct_extract %12 : $_StringGuts, #_StringGuts._object // users: %23, %16
  %16 = struct_extract %15 : $_StringObject, #_StringObject._countAndFlagsBits // user: %18
  %17 = struct_extract %14 : $UInt64, #UInt64._value // user: %19
  %18 = struct_extract %16 : $UInt64, #UInt64._value // user: %19
  %19 = builtin "cmp_eq_Int64"(%17 : $Builtin.Int64, %18 : $Builtin.Int64) : $Builtin.Int1 // user: %20
  cond_br %19, bb3, bb4                           // id: %20

bb3:                                              // Preds: bb2
  %21 = struct_extract %13 : $_StringObject, #_StringObject._object // user: %22
  %22 = unchecked_trivial_bit_cast %21 : $Builtin.BridgeObject to $UInt64 // user: %25
  %23 = struct_extract %15 : $_StringObject, #_StringObject._object // user: %24
  %24 = unchecked_trivial_bit_cast %23 : $Builtin.BridgeObject to $UInt64 // user: %26
  %25 = struct_extract %22 : $UInt64, #UInt64._value // user: %27
  %26 = struct_extract %24 : $UInt64, #UInt64._value // user: %27
  %27 = builtin "cmp_eq_Int64"(%25 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  cond_br %27, bb5, bb6                           // id: %28

bb4:                                              // Preds: bb2
  br bb8                                          // id: %29

bb5:                                              // Preds: bb3
  br bb9                                          // id: %30

bb6:                                              // Preds: bb3
  br bb8                                          // id: %31

bb7:                                              // Preds: bb8
  br bb9                                          // id: %32

bb8:                                              // Preds: bb4 bb6
  %33 = enum $_StringComparisonResult, #_StringComparisonResult.equal!enumelt // user: %35
  // function_ref _stringCompareWithSmolCheck(_:_:expecting:)
  %34 = function_ref @$ss27_stringCompareWithSmolCheck__9expectingSbs11_StringGutsV_ADs01_G16ComparisonResultOtF : $@convention(thin) (@guaranteed _StringGuts, @guaranteed _StringGuts, _StringComparisonResult) -> Bool // user: %35
  %35 = apply %34(%11, %12, %33) : $@convention(thin) (@guaranteed _StringGuts, @guaranteed _StringGuts, _StringComparisonResult) -> Bool // user: %36
  %36 = struct_extract %35 : $Bool, #Bool._value  // user: %37
  cond_br %36, bb7, bb10                          // id: %37

bb9:                                              // Preds: bb5 bb7
  %38 = integer_literal $Builtin.Int1, -1         // user: %39
  br bb18(%38 : $Builtin.Int1)                    // id: %39

bb10:                                             // Preds: bb8
  %40 = integer_literal $Builtin.Int1, 0          // user: %41
  br bb18(%40 : $Builtin.Int1)                    // id: %41

bb11:                                             // Preds: bb1
  br bb17                                         // id: %42

// %43                                            // users: %47, %46
bb12(%43 : $Int):                                 // Preds: bb0
  switch_enum %1 : $Identifier, case #Identifier.integer!enumelt: bb13, case #Identifier.string!enumelt: bb16, forwarding: @owned // id: %44

// %45                                            // user: %48
bb13(%45 : $Int):                                 // Preds: bb12
  debug_value %43 : $Int, let, name "l0"          // id: %46
  %47 = struct_extract %43 : $Int, #Int._value    // user: %49
  %48 = struct_extract %45 : $Int, #Int._value    // user: %49
  %49 = builtin "cmp_eq_Int64"(%47 : $Builtin.Int64, %48 : $Builtin.Int64) : $Builtin.Int1 // user: %50
  cond_br %49, bb14, bb15                         // id: %50

bb14:                                             // Preds: bb13
  %51 = integer_literal $Builtin.Int1, -1         // user: %52
  br bb18(%51 : $Builtin.Int1)                    // id: %52

bb15:                                             // Preds: bb13
  %53 = integer_literal $Builtin.Int1, 0          // user: %54
  br bb18(%53 : $Builtin.Int1)                    // id: %54

bb16:                                             // Preds: bb12
  br bb17                                         // id: %55

bb17:                                             // Preds: bb16 bb11
  %56 = integer_literal $Builtin.Int1, 0          // user: %57
  br bb18(%56 : $Builtin.Int1)                    // id: %57

// %58                                            // user: %59
bb18(%58 : $Builtin.Int1):                        // Preds: bb17 bb14 bb15 bb9 bb10
  %59 = struct $Bool (%58 : $Builtin.Int1)        // user: %60
  return %59 : $Bool                              // id: %60
} // end sil function '$s6source10IdentifierO21__derived_enum_equalsySbAC_ACtFZ'

// Identifier.hashValue.getter
sil hidden @$s6source10IdentifierO9hashValueSivg : $@convention(method) (@guaranteed Identifier) -> Int {
// %0 "self"                                      // users: %10, %11, %1
bb0(%0 : $Identifier):
  debug_value %0 : $Identifier, let, name "self", argno 1, implicit // id: %1
  %2 = integer_literal $Builtin.Int64, 0          // users: %14, %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %7
  %4 = alloc_stack $Hasher                        // users: %28, %25, %32, %31, %18, %16, %9, %8
  %5 = metatype $@thin Hasher.Type                // user: %7
  // function_ref Hasher.init(_seed:)
  %6 = function_ref @$ss6HasherV5_seedABSi_tcfC : $@convention(method) (Int, @thin Hasher.Type) -> Hasher // user: %7
  %7 = apply %6(%3, %5) : $@convention(method) (Int, @thin Hasher.Type) -> Hasher // user: %8
  store %7 to %4 : $*Hasher                       // id: %8
  debug_value %4 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref // id: %9
  debug_value %0 : $Identifier, let, name "self", argno 2, implicit // id: %10
  switch_enum %0 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb2 // id: %11

// %12                                            // users: %18, %13
bb1(%12 : $String):                               // Preds: bb0
  debug_value %12 : $String, let, name "a0"       // id: %13
  %14 = struct $UInt (%2 : $Builtin.Int64)        // user: %16
  // function_ref Hasher._combine(_:)
  %15 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // user: %16
  %16 = apply %15(%14, %4) : $@convention(method) (UInt, @inout Hasher) -> ()
  // function_ref String.hash(into:)
  %17 = function_ref @$sSS4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed String) -> () // user: %18
  %18 = apply %17(%4, %12) : $@convention(method) (@inout Hasher, @guaranteed String) -> ()
  br bb3                                          // id: %19

// %20                                            // users: %26, %21
bb2(%20 : $Int):                                  // Preds: bb0
  debug_value %20 : $Int, let, name "a0"          // id: %21
  %22 = integer_literal $Builtin.Int64, 1         // user: %23
  %23 = struct $UInt (%22 : $Builtin.Int64)       // user: %25
  // function_ref Hasher._combine(_:)
  %24 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // users: %28, %25
  %25 = apply %24(%23, %4) : $@convention(method) (UInt, @inout Hasher) -> ()
  %26 = struct_extract %20 : $Int, #Int._value    // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64)       // user: %28
  %28 = apply %24(%27, %4) : $@convention(method) (UInt, @inout Hasher) -> ()
  br bb3                                          // id: %29

bb3:                                              // Preds: bb2 bb1
  // function_ref Hasher._finalize()
  %30 = function_ref @$ss6HasherV9_finalizeSiyF : $@convention(method) (@inout Hasher) -> Int // user: %31
  %31 = apply %30(%4) : $@convention(method) (@inout Hasher) -> Int // user: %33
  dealloc_stack %4 : $*Hasher                     // id: %32
  return %31 : $Int                               // id: %33
} // end sil function '$s6source10IdentifierO9hashValueSivg'

// protocol witness for Hashable.hashValue.getter in conformance Identifier
sil private [transparent] [thunk] @$s6source10IdentifierOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed Identifier) -> Int {
// %0                                             // user: %1
bb0(%0 : $*Identifier):
  %1 = load %0 : $*Identifier                     // users: %12, %11, %2
  debug_value %1 : $Identifier, let, name "self", argno 1, implicit // id: %2
  %3 = integer_literal $Builtin.Int64, 0          // users: %15, %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %8
  %5 = alloc_stack $Hasher                        // users: %29, %26, %33, %32, %19, %17, %10, %9
  %6 = metatype $@thin Hasher.Type                // user: %8
  // function_ref Hasher.init(_seed:)
  %7 = function_ref @$ss6HasherV5_seedABSi_tcfC : $@convention(method) (Int, @thin Hasher.Type) -> Hasher // user: %8
  %8 = apply %7(%4, %6) : $@convention(method) (Int, @thin Hasher.Type) -> Hasher // user: %9
  store %8 to %5 : $*Hasher                       // id: %9
  debug_value %5 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref // id: %10
  debug_value %1 : $Identifier, let, name "self", argno 2, implicit // id: %11
  switch_enum %1 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb2 // id: %12

// %13                                            // users: %19, %14
bb1(%13 : $String):                               // Preds: bb0
  debug_value %13 : $String, let, name "a0"       // id: %14
  %15 = struct $UInt (%3 : $Builtin.Int64)        // user: %17
  // function_ref Hasher._combine(_:)
  %16 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // user: %17
  %17 = apply %16(%15, %5) : $@convention(method) (UInt, @inout Hasher) -> ()
  // function_ref String.hash(into:)
  %18 = function_ref @$sSS4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed String) -> () // user: %19
  %19 = apply %18(%5, %13) : $@convention(method) (@inout Hasher, @guaranteed String) -> ()
  br bb3                                          // id: %20

// %21                                            // users: %27, %22
bb2(%21 : $Int):                                  // Preds: bb0
  debug_value %21 : $Int, let, name "a0"          // id: %22
  %23 = integer_literal $Builtin.Int64, 1         // user: %24
  %24 = struct $UInt (%23 : $Builtin.Int64)       // user: %26
  // function_ref Hasher._combine(_:)
  %25 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // users: %29, %26
  %26 = apply %25(%24, %5) : $@convention(method) (UInt, @inout Hasher) -> ()
  %27 = struct_extract %21 : $Int, #Int._value    // user: %28
  %28 = struct $UInt (%27 : $Builtin.Int64)       // user: %29
  %29 = apply %25(%28, %5) : $@convention(method) (UInt, @inout Hasher) -> ()
  br bb3                                          // id: %30

bb3:                                              // Preds: bb2 bb1
  // function_ref Hasher._finalize()
  %31 = function_ref @$ss6HasherV9_finalizeSiyF : $@convention(method) (@inout Hasher) -> Int // user: %32
  %32 = apply %31(%5) : $@convention(method) (@inout Hasher) -> Int // user: %34
  dealloc_stack %5 : $*Hasher                     // id: %33
  return %32 : $Int                               // id: %34
} // end sil function '$s6source10IdentifierOSHAASH9hashValueSivgTW'

// protocol witness for Hashable.hash(into:) in conformance Identifier
sil private [transparent] [thunk] @$s6source10IdentifierOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed Identifier) -> () {
// %0                                             // users: %23, %20, %13, %11, %3
// %1                                             // user: %2
bb0(%0 : $*Hasher, %1 : $*Identifier):
  %2 = load %1 : $*Identifier                     // users: %5, %4
  debug_value %0 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref // id: %3
  debug_value %2 : $Identifier, let, name "self", argno 2, implicit // id: %4
  switch_enum %2 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb2 // id: %5

// %6                                             // users: %13, %7
bb1(%6 : $String):                                // Preds: bb0
  debug_value %6 : $String, let, name "a0"        // id: %7
  %8 = integer_literal $Builtin.Int64, 0          // user: %9
  %9 = struct $UInt (%8 : $Builtin.Int64)         // user: %11
  // function_ref Hasher._combine(_:)
  %10 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // user: %11
  %11 = apply %10(%9, %0) : $@convention(method) (UInt, @inout Hasher) -> ()
  // function_ref String.hash(into:)
  %12 = function_ref @$sSS4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed String) -> () // user: %13
  %13 = apply %12(%0, %6) : $@convention(method) (@inout Hasher, @guaranteed String) -> ()
  br bb3                                          // id: %14

// %15                                            // users: %21, %16
bb2(%15 : $Int):                                  // Preds: bb0
  debug_value %15 : $Int, let, name "a0"          // id: %16
  %17 = integer_literal $Builtin.Int64, 1         // user: %18
  %18 = struct $UInt (%17 : $Builtin.Int64)       // user: %20
  // function_ref Hasher._combine(_:)
  %19 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // users: %23, %20
  %20 = apply %19(%18, %0) : $@convention(method) (UInt, @inout Hasher) -> ()
  %21 = struct_extract %15 : $Int, #Int._value    // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %23
  %23 = apply %19(%22, %0) : $@convention(method) (UInt, @inout Hasher) -> ()
  br bb3                                          // id: %24

bb3:                                              // Preds: bb2 bb1
  %25 = tuple ()                                  // user: %26
  return %25 : $()                                // id: %26
} // end sil function '$s6source10IdentifierOSHAASH4hash4intoys6HasherVz_tFTW'

// protocol witness for Hashable._rawHashValue(seed:) in conformance Identifier
sil private [transparent] [thunk] [always_inline] @$s6source10IdentifierOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed Identifier) -> Int {
// %0                                             // user: %6
// %1                                             // user: %2
bb0(%0 : $Int, %1 : $*Identifier):
  %2 = load %1 : $*Identifier                     // users: %10, %9
  %3 = alloc_stack $Hasher                        // users: %28, %25, %32, %31, %18, %16, %8, %7
  %4 = metatype $@thin Hasher.Type                // user: %6
  // function_ref Hasher.init(_seed:)
  %5 = function_ref @$ss6HasherV5_seedABSi_tcfC : $@convention(method) (Int, @thin Hasher.Type) -> Hasher // user: %6
  %6 = apply %5(%0, %4) : $@convention(method) (Int, @thin Hasher.Type) -> Hasher // user: %7
  store %6 to %3 : $*Hasher                       // id: %7
  debug_value %3 : $*Hasher, var, name "hasher", argno 1, implicit, expr op_deref // id: %8
  debug_value %2 : $Identifier, let, name "self", argno 2, implicit // id: %9
  switch_enum %2 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb2 // id: %10

// %11                                            // users: %18, %12
bb1(%11 : $String):                               // Preds: bb0
  debug_value %11 : $String, let, name "a0"       // id: %12
  %13 = integer_literal $Builtin.Int64, 0         // user: %14
  %14 = struct $UInt (%13 : $Builtin.Int64)       // user: %16
  // function_ref Hasher._combine(_:)
  %15 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // user: %16
  %16 = apply %15(%14, %3) : $@convention(method) (UInt, @inout Hasher) -> ()
  // function_ref String.hash(into:)
  %17 = function_ref @$sSS4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed String) -> () // user: %18
  %18 = apply %17(%3, %11) : $@convention(method) (@inout Hasher, @guaranteed String) -> ()
  br bb3                                          // id: %19

// %20                                            // users: %26, %21
bb2(%20 : $Int):                                  // Preds: bb0
  debug_value %20 : $Int, let, name "a0"          // id: %21
  %22 = integer_literal $Builtin.Int64, 1         // user: %23
  %23 = struct $UInt (%22 : $Builtin.Int64)       // user: %25
  // function_ref Hasher._combine(_:)
  %24 = function_ref @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> () // users: %28, %25
  %25 = apply %24(%23, %3) : $@convention(method) (UInt, @inout Hasher) -> ()
  %26 = struct_extract %20 : $Int, #Int._value    // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64)       // user: %28
  %28 = apply %24(%27, %3) : $@convention(method) (UInt, @inout Hasher) -> ()
  br bb3                                          // id: %29

bb3:                                              // Preds: bb2 bb1
  // function_ref Hasher._finalize()
  %30 = function_ref @$ss6HasherV9_finalizeSiyF : $@convention(method) (@inout Hasher) -> Int // user: %31
  %31 = apply %30(%3) : $@convention(method) (@inout Hasher) -> Int // user: %33
  dealloc_stack %3 : $*Hasher                     // id: %32
  return %31 : $Int                               // id: %33
} // end sil function '$s6source10IdentifierOSHAASH13_rawHashValue4seedS2i_tFTW'

// protocol witness for static Equatable.== infix(_:_:) in conformance Identifier
sil private [transparent] [thunk] @$s6source10IdentifierOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed Identifier, @in_guaranteed Identifier, @thick Identifier.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*Identifier, %1 : $*Identifier, %2 : $@thick Identifier.Type):
  %3 = load %0 : $*Identifier                     // users: %7, %5
  %4 = load %1 : $*Identifier                     // users: %11, %9, %6
  debug_value %3 : $Identifier, let, name "a", argno 1, implicit // id: %5
  debug_value %4 : $Identifier, let, name "b", argno 2, implicit // id: %6
  switch_enum %3 : $Identifier, case #Identifier.string!enumelt: bb1, case #Identifier.integer!enumelt: bb2 // id: %7

// %8                                             // users: %14, %13
bb1(%8 : $String):                                // Preds: bb0
  switch_enum %4 : $Identifier, case #Identifier.string!enumelt: bb3, case #Identifier.integer!enumelt: bb4 // id: %9

// %10                                            // users: %53, %52
bb2(%10 : $Int):                                  // Preds: bb0
  switch_enum %4 : $Identifier, case #Identifier.integer!enumelt: bb15, case #Identifier.string!enumelt: bb16 // id: %11

// %12                                            // user: %15
bb3(%12 : $String):                               // Preds: bb1
  debug_value %8 : $String, let, name "l0"        // id: %13
  %14 = struct_extract %8 : $String, #String._guts // users: %43, %16
  %15 = struct_extract %12 : $String, #String._guts // users: %43, %18
  %16 = struct_extract %14 : $_StringGuts, #_StringGuts._object // users: %25, %17
  %17 = struct_extract %16 : $_StringObject, #_StringObject._countAndFlagsBits // user: %20
  %18 = struct_extract %15 : $_StringGuts, #_StringGuts._object // users: %27, %19
  %19 = struct_extract %18 : $_StringObject, #_StringObject._countAndFlagsBits // user: %21
  %20 = struct_extract %17 : $UInt64, #UInt64._value // user: %22
  %21 = struct_extract %19 : $UInt64, #UInt64._value // user: %22
  %22 = builtin "cmp_eq_Int64"(%20 : $Builtin.Int64, %21 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  cond_br %22, bb5, bb6                           // id: %23

bb4:                                              // Preds: bb1
  br bb14                                         // id: %24

bb5:                                              // Preds: bb3
  %25 = struct_extract %16 : $_StringObject, #_StringObject._object // user: %26
  %26 = unchecked_trivial_bit_cast %25 : $Builtin.BridgeObject to $UInt64 // user: %29
  %27 = struct_extract %18 : $_StringObject, #_StringObject._object // user: %28
  %28 = unchecked_trivial_bit_cast %27 : $Builtin.BridgeObject to $UInt64 // user: %30
  %29 = struct_extract %26 : $UInt64, #UInt64._value // user: %31
  %30 = struct_extract %28 : $UInt64, #UInt64._value // user: %31
  %31 = builtin "cmp_eq_Int64"(%29 : $Builtin.Int64, %30 : $Builtin.Int64) : $Builtin.Int1 // user: %32
  cond_br %31, bb7, bb8                           // id: %32

bb6:                                              // Preds: bb3
  br bb11                                         // id: %33

bb7:                                              // Preds: bb5
  br bb9                                          // id: %34

bb8:                                              // Preds: bb5
  br bb11                                         // id: %35

bb9:                                              // Preds: bb12 bb7
  %36 = integer_literal $Builtin.Int1, -1         // user: %37
  br bb10(%36 : $Builtin.Int1)                    // id: %37

// %38                                            // user: %39
bb10(%38 : $Builtin.Int1):                        // Preds: bb18 bb17 bb14 bb13 bb9
  %39 = struct $Bool (%38 : $Builtin.Int1)        // user: %40
  return %39 : $Bool                              // id: %40

bb11:                                             // Preds: bb6 bb8
  %41 = enum $_StringComparisonResult, #_StringComparisonResult.equal!enumelt // user: %43
  // function_ref _stringCompareWithSmolCheck(_:_:expecting:)
  %42 = function_ref @$ss27_stringCompareWithSmolCheck__9expectingSbs11_StringGutsV_ADs01_G16ComparisonResultOtF : $@convention(thin) (@guaranteed _StringGuts, @guaranteed _StringGuts, _StringComparisonResult) -> Bool // user: %43
  %43 = apply %42(%14, %15, %41) : $@convention(thin) (@guaranteed _StringGuts, @guaranteed _StringGuts, _StringComparisonResult) -> Bool // user: %44
  %44 = struct_extract %43 : $Bool, #Bool._value  // user: %45
  cond_br %44, bb12, bb13                         // id: %45

bb12:                                             // Preds: bb11
  br bb9                                          // id: %46

bb13:                                             // Preds: bb11
  %47 = integer_literal $Builtin.Int1, 0          // user: %48
  br bb10(%47 : $Builtin.Int1)                    // id: %48

bb14:                                             // Preds: bb16 bb4
  %49 = integer_literal $Builtin.Int1, 0          // user: %50
  br bb10(%49 : $Builtin.Int1)                    // id: %50

// %51                                            // user: %54
bb15(%51 : $Int):                                 // Preds: bb2
  debug_value %10 : $Int, let, name "l0"          // id: %52
  %53 = struct_extract %10 : $Int, #Int._value    // user: %55
  %54 = struct_extract %51 : $Int, #Int._value    // user: %55
  %55 = builtin "cmp_eq_Int64"(%53 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb17, bb18                         // id: %56

bb16:                                             // Preds: bb2
  br bb14                                         // id: %57

bb17:                                             // Preds: bb15
  %58 = integer_literal $Builtin.Int1, -1         // user: %59
  br bb10(%58 : $Builtin.Int1)                    // id: %59

bb18:                                             // Preds: bb15
  %60 = integer_literal $Builtin.Int1, 0          // user: %61
  br bb10(%60 : $Builtin.Int1)                    // id: %61
} // end sil function '$s6source10IdentifierOSQAASQ2eeoiySbx_xtFZTW'

// AnyHashable.init<A>(_:)
sil @$ss11AnyHashableVyABxcSHRzlufC : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in τ_0_0, @thin AnyHashable.Type) -> @out AnyHashable

// _stringCompareWithSmolCheck(_:_:expecting:)
sil [readonly] @$ss27_stringCompareWithSmolCheck__9expectingSbs11_StringGutsV_ADs01_G16ComparisonResultOtF : $@convention(thin) (@guaranteed _StringGuts, @guaranteed _StringGuts, _StringComparisonResult) -> Bool

// Hasher.init(_seed:)
sil [releasenone] @$ss6HasherV5_seedABSi_tcfC : $@convention(method) (Int, @thin Hasher.Type) -> Hasher

// Hasher._finalize()
sil [releasenone] @$ss6HasherV9_finalizeSiyF : $@convention(method) (@inout Hasher) -> Int

// String.hash(into:)
sil @$sSS4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, @guaranteed String) -> ()

// Hasher._combine(_:)
sil [releasenone] @$ss6HasherV8_combineyySuF : $@convention(method) (UInt, @inout Hasher) -> ()

sil_witness_table hidden Identifier: Hashable module source {
  base_protocol Equatable: Identifier: Equatable module source
  method #Hashable.hashValue!getter: <Self where Self : Hashable> (Self) -> () -> Int : @$s6source10IdentifierOSHAASH9hashValueSivgTW	// protocol witness for Hashable.hashValue.getter in conformance Identifier
  method #Hashable.hash: <Self where Self : Hashable> (Self) -> (inout Hasher) -> () : @$s6source10IdentifierOSHAASH4hash4intoys6HasherVz_tFTW	// protocol witness for Hashable.hash(into:) in conformance Identifier
  method #Hashable._rawHashValue: <Self where Self : Hashable> (Self) -> (Int) -> Int : @$s6source10IdentifierOSHAASH13_rawHashValue4seedS2i_tFTW	// protocol witness for Hashable._rawHashValue(seed:) in conformance Identifier
}

sil_witness_table hidden Identifier: Equatable module source {
  method #Equatable."==": <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s6source10IdentifierOSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance Identifier
}



// Mappings from '#fileID' to '#filePath':
//   'source/source.swift' => 'source.swift'


